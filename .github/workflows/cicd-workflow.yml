name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/**
      - hotfix/**
  pull_request:
    branches:
      - develop
      - main


jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: supabase_admin
          POSTGRES_PASSWORD: password
          POSTGRES_DB: supabase_db
        options: >-
          --health-cmd="pg_isready -U supabase_admin" --health-interval=5s --health-timeout=3s --health-retries=3
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Setup Prisma
        run: npx prisma generate

      - name: Run Unit and Integration Tests
        env:
          DATABASE_URL: "postgresql://supabase_admin:password@localhost:5432/supabase_db"
        run: npm run test:cov

  snyk:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test, snyk]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run prisma generate
        run: npx prisma generate

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/nest-prisma-boilerplate:latest .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/nest-prisma-boilerplate:latest

  trivy:
    name: Docker Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin

      - name: Run Trivy Scan
        run: trivy image ${{ secrets.DOCKER_USERNAME }}/nest-prisma-boilerplate:latest


  Minikube:
    runs-on: ubuntu-latest
    needs: [build, trivy]
    name: Image to Minikube

    steps:
      - uses: actions/checkout@v3

      - name: Start minikube
        uses: medyagh/setup-minikube@master

      - name: Check cluster nodes
        run: kubectl get nodes

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull Docker Image from Docker Hub
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/nest-prisma-boilerplate:latest

      - name: Change Kubernetes ConfigMap
        run: |
          sed -i "s/\${DATABASE_URL}/${{ secrets.DATABASE_URL }}/g" k8s/configmap-template.yaml
          sed -i "s/\${JWT_SECRET}/${{ secrets.JWT_SECRET }}/g" k8s/configmap-template.yaml
          sed -i "s/\${AWS_ACCESS_KEY_ID}/${{ secrets.AWS_ACCESS_KEY_ID }}/g" k8s/configmap-template.yaml
          sed -i "s/\${AWS_SECRET_ACCESS_KEY}/${{ secrets.AWS_SECRET_ACCESS_KEY }}/g" k8s/configmap-template.yaml
          sed -i "s/\${AWS_S3_ENDPOINT}/${{ secrets.AWS_S3_ENDPOINT }}/g" k8s/configmap-template.yaml
          sed -i "s/\${AWS_S3_BUCKET_NAME}/${{ secrets.AWS_S3_BUCKET_NAME }}/g" k8s/configmap-template.yaml

      - name: Deploy Kubernetes Resources
        run: |
          kubectl apply -f k8s/configmap-template.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/deployment.yaml

      - name: Stop Minikube
        run: |
          minikube stop